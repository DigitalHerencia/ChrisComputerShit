// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  role      UserRole @default(EMPLOYEE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  timeEntries         TimeEntry[]
  approvedTimeEntries TimeEntry[] @relation("TimeEntryApprovedBy")
  createdProjects     Project[]   @relation("ProjectCreator")
  assignedTasks       Task[]
  uploadedDocs        Document[]
  dailyLogs           DailyLog[]
  subscriptions       Subscription[]

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  location    String?
  startDate   DateTime?
  endDate     DateTime?
  status      ProjectStatus @default(ACTIVE)
  clientId    String?
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  createdBy      User            @relation("ProjectCreator", fields: [createdById], references: [id])
  client         Entity?         @relation(fields: [clientId], references: [id])
  dailyLogs      DailyLog[]
  timeEntries    TimeEntry[]
  tasks          Task[]
  documents      Document[]
  purchaseOrders PurchaseOrder[]

  @@index([clientId])
  @@index([createdById])
  @@map("projects")
}

model DailyLog {
  id          String   @id @default(cuid())
  projectId   String
  date        DateTime
  weather     String?
  crewCount   Int?
  workDone    String
  notes       String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy User       @relation(fields: [createdById], references: [id])
  photos    LogPhoto[]

  @@index([projectId])
  @@index([createdById])
  @@map("daily_logs")
}

model LogPhoto {
  id        String   @id @default(cuid())
  logId     String
  url       String
  caption   String?
  createdAt DateTime @default(now())

  // Relations
  log DailyLog @relation(fields: [logId], references: [id], onDelete: Cascade)

  @@index([logId])
  @@map("log_photos")
}

model TimeEntry {
  id           String   @id @default(cuid())
  projectId    String
  userId       String
  date         DateTime
  hoursWorked  Float
  overtime     Float    @default(0)
  description  String?
  approved     Boolean  @default(false)
  approvedById String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User    @relation(fields: [userId], references: [id])
  approvedBy User?   @relation("TimeEntryApprovedBy", fields: [approvedById], references: [id])

  @@index([projectId])
  @@index([userId])
  @@index([approvedById])
  @@map("time_entries")
}

model Task {
  id          String     @id @default(cuid())
  projectId   String
  title       String
  description String?
  dueDate     DateTime?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  assigneeId  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee User?   @relation(fields: [assigneeId], references: [id])

  @@index([projectId])
  @@index([assigneeId])
  @@map("tasks")
}

model Document {
  id           String       @id @default(cuid())
  projectId    String?
  title        String
  type         DocumentType
  url          String
  fileSize     Int?
  mimeType     String?
  uploadedById String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  project    Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedBy User     @relation(fields: [uploadedById], references: [id])

  @@index([projectId])
  @@index([uploadedById])
  @@map("documents")
}

model PurchaseOrder {
  id           String    @id @default(cuid())
  projectId    String
  vendorId     String
  poNumber     String    @unique
  description  String?
  totalAmount  Float
  status       POStatus  @default(PENDING)
  orderDate    DateTime  @default(now())
  expectedDate DateTime?
  receivedDate DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  project Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  vendor  Entity   @relation(fields: [vendorId], references: [id])
  items   POItem[]

  @@index([projectId])
  @@index([vendorId])
  @@map("purchase_orders")
}

model POItem {
  id          String @id @default(cuid())
  poId        String
  description String
  quantity    Float
  unitPrice   Float
  totalPrice  Float

  // Relations
  purchaseOrder PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)

  @@index([poId])
  @@map("po_items")
}

model Entity {
  id          String     @id @default(cuid())
  type        EntityType
  name        String
  contactName String?
  phone       String?
  email       String?
  address     String?
  notes       String?
  schedule    String? // For burrito trucks and other scheduled services
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  clientProjects Project[]       @relation
  purchaseOrders PurchaseOrder[]

  @@map("entities")
}

model Subscription {
  id          String   @id
  userId      String
  status      String
  planId      String?
  trialEndsAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("subscriptions")
}

// Enums
enum UserRole {
  ADMIN
  SUPERVISOR
  EMPLOYEE
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DocumentType {
  CONTRACT
  PERMIT
  INVOICE
  RECEIPT
  PLAN
  PHOTO
  OTHER
}

enum POStatus {
  PENDING
  ORDERED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum EntityType {
  CLIENT
  CONTRACTOR
  VENDOR
  INSPECTOR
  EMPLOYEE
  BURRITO_TRUCK
  OTHER
}
